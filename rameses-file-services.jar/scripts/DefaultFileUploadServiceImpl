import com.rameses.annotations.*;
import com.rameses.util.*;
import com.rameses.osiris3.xconnection.XConnection;
import java.rmi.server.UID;

public class DefaultFileUploadServiceImpl { 

	@DataContext('sys_file_var') 
	def filevar; 

	@DataContext('sys_file_registry') 
	def fileregistry; 

	@DataContext( dynamic=true ) 
	def db; 

	@Context 
	def currentCtx;

	@Service('DateService') 
	def dateSvc; 

	@ProxyMethod(local=true) 
	public def register( data ) { 
		boolean autogen_fileid = false; 
		if ( !data.fileid ) { 
			data.fileid = 'F'+ new java.rmi.server.UID(); 
			autogen_fileid = true; 
		} 

		if ( !autogen_fileid ) {
			def oldrec = fileregistry.find([ objid: data.fileid ]).first(); 
			if ( oldrec?.objid ) return data;  
		} 

		def fvar = filevar.find([ name: 'dbcontext' ]).first(); 
		if ( !fvar?.value ) throw new Exception('Please provide a dbcontext variable'); 

		def dbcontext = fvar.value; 
		fvar = filevar.find([ name: 'filecontext' ]).first(); 
		if ( !fvar?.value ) throw new Exception('Please provide a filecontext variable'); 

		def filecontext = fvar.value; 
		def xconn = currentCtx.getResource( XConnection.class, filecontext ); 
		if ( !xconn ) throw new Exception(''+ filecontext +' connection file does not exist');  

		xconn.getBaseDirectory(); 
		def folder = xconn.createFolder( data.fileid );  
		folder.writeMeta( data.filename, data.filetype, data.filesize, data.chunkcount ); 

		fileregistry.create([ 
			objid      : data.fileid, 
			dtfiled    : dateSvc.getServerDate(),  
			dbcontext  : dbcontext, 
			filecontext: filecontext 
		]); 
		return data; 
	} 

	@ProxyMethod(local=true) 
	public void addItem( data ) { 
		addItems([ fileid: data.parentid, items:[ data ]]); 
	} 

	@ProxyMethod(local=true) 
	public void addItems( params ) { 
		if ( !params.fileid ) throw new Exception('fileid parameter is required'); 
		if ( !params.items ) throw new Exception('items parameter is required'); 

		def reg = fileregistry.find([ objid: params.fileid ]).first(); 
		if ( !reg ) throw new Exception("'"+ params.fileid +"' file registry not found"); 

		def filecontext = reg.filecontext; 
		def xconn = currentCtx.getResource( XConnection.class, filecontext ); 
		if ( !xconn ) throw new Exception(''+ filecontext +' connection file does not exist');  

		xconn.getBaseDirectory(); 

		def folder = xconn.getFolder( params.fileid ); 
		params.items.each{  
			folder.addFile( it.indexno, it.content ); 
		} 	

		if ( folder.isCompleted() ) { 
			def rundate = dateSvc.getServerDate();
			def meta = folder.meta.load();
			def dbo = db.lookup( 'sys_file', reg.dbcontext ); 
			dbo.create([ 
				objid    : params.fileid, 
				dtfiled  : rundate, 
				filename : meta.fileName, 
				filetype : meta.fileType, 
				filesize : meta.fileSize,
				chunkcount : meta.chunkCount  
			]); 
			
			fileregistry.find([ objid: params.fileid ]).update([ dtcompleted: rundate ]); 
		} 
	} 

	@ProxyMethod(local=true) 
	public void removeFile( params ) {
		if ( !params.fileid ) throw new Exception('fileid parameter is required'); 

		def reg = fileregistry.find([ objid: params.fileid ]).first(); 
		if ( !reg ) return;  

		fileregistry.find([ objid: params.fileid ]).delete(); 

		def dbo = db.lookup( 'sys_file', reg.dbcontext ); 
		dbo.find([ objid: params.fileid ]).delete(); 

		def filecontext = reg.filecontext; 
		def xconn = currentCtx.getResource( XConnection.class, filecontext ); 
		if ( !xconn ) throw new Exception(''+ filecontext +' connection file does not exist');  

		xconn.getBaseDirectory(); 
		xconn.getFolder( params.fileid ).remove();  	
	} 
} 
